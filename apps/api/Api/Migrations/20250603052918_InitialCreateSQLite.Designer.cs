// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20250603052918_InitialCreateSQLite")]
    partial class InitialCreateSQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Api.Models.Entities.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Exchange_Code");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Exchange_Name");

                    b.ToTable("Exchanges", (string)null);
                });

            modelBuilder.Entity("Api.Models.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Sector_Name");

                    b.ToTable("Sectors", (string)null);
                });

            modelBuilder.Entity("Api.Models.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MarketCap")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<long?>("OutstandingShares")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId")
                        .HasDatabaseName("IX_Stock_ExchangeId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Stock_IsActive");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("IX_Stock_SectorId");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("IX_Stock_Symbol");

                    b.HasIndex("Symbol", "ExchangeId")
                        .IsUnique()
                        .HasDatabaseName("IX_Stock_Symbol_Exchange");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("Api.Models.Entities.StockPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AdjustedClose")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("High")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasPrecision(18, 4)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_StockPrice_Date");

                    b.HasIndex("StockId", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_StockPrice_StockId_Date_OHLCV")
                        .HasAnnotation("SqlServer:Include", new[] { "Open", "High", "Low", "Close", "Volume" });

                    b.ToTable("StockPrices", (string)null);
                });

            modelBuilder.Entity("Api.Models.Entities.Stock", b =>
                {
                    b.HasOne("Api.Models.Entities.Exchange", "Exchange")
                        .WithMany("Stocks")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Api.Models.Entities.Sector", "Sector")
                        .WithMany("Stocks")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Api.Models.Entities.StockPrice", b =>
                {
                    b.HasOne("Api.Models.Entities.Stock", "Stock")
                        .WithMany("Prices")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Api.Models.Entities.Exchange", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Api.Models.Entities.Sector", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Api.Models.Entities.Stock", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
